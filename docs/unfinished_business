Or, in other words, "TODO"
Items marked "-" aren't as important as items marked "+"
###### Next

###### Release
 - bnf/convert_bnf.py: DISABLE_HASH = False

###### Soon
 + Store results of grammar expressions. I should be able to do Tracker.FA ...
 - Minimal parse tree printout
 - Implement everything according to http://www.lojban.org/tiki/Magic+Words
    * Make sure that everything interacts properly
 - More error checking and recovery
    - lai & friends in cmene
    - invalid consonant clusters in words
 - What about that old '*' on TrackerMatch? Uhm.
 - Check your dotside!
 - make word_end in morphology.py indexed from 0 instead of 1?
 + Test IPA and other alphabets
 - Don't use "config" for the config.Configuration() object, use "conf"? Or rename config.py to conf.py
 - Add option for progress bar, and maybe auto-detect if you might want progress info. Say... 3 seconds or so
 - Link to python3, not python3.0. (You actually have 3.1 installed...)
 - Put in GPL licensing or something and other legalese stuff in files that need it (Not lojban.bnf)

###### Later
 - Check that each marker in brkwords is properly implemented and documented
 - Add an "--abusive" option zo'o
 - $ grep -C 2 "XXX\|TODO" */*.bnf *.py */*.py
 - Check for weird/odd/wrong comments
 - Make sure I didn't accidentally change/deleting anything in BRKWORDS.txt
 - (seperate out the configuration options for each section?)
 - It would be interesting to have an option to disable line-buffering; the user could see the immediate tokenization.
 - How do I like Position? Does it match up with vi, kate, and other editors?
 - Do I like how the Configuration object is propagated? Is there a way to make it more... uhmm
   - Don't use self.config, use self.buffer.config? (the way it is now is more flexible)
 + Make GlyphTable handle multi-length input characters (sampa: {l=?dZEim=s} should be {la.djeims})
 - CLI argument to read stdin from a file
 - Print out tokenization immediatly on input (import tty)
 - It could be faster! Instead of Xor(Xor(...), A) do Xor(A, Xor(...). Because that would make it faster? Only if the most common forms are listed first in the BNF. Well, at least the old method might not be faster, but the current one would be faster because it has to run more XOr tests.
 - Another way to make it faster would be to merge Concat(A, Concat(B, C)) into Concat(A, B, C), at the cost of increased code complexity. (Or, perhaps Concat(A, Concat(B, Concat(C, D))) into Concat(Concat(A, B), Concat(C, D)), without adding more code?)
 + Move lujvo/fuhivla sorting crap in morphology
 - Have a config option for zoi to be filtered by the alphabet, or just from what we get
 + could optimize by first parsing sentences and ignoring content? (Well, not reaaaaly an optimization. But better for streaming.) "--flat-parse". Parse in units of the selma'o I. x-sentence-parse-root might be, "NIhO | I | sentence"]
 - have switches that enable or disable certain parts of the BNF to allow for grammars designed for other situations

###### Much Later
 - (Have error messages in lojban?)
 - Emulate output of jbofihe and camxes? (And other parsers?)
 - Semantics engine and supporting stuff (Nope. Seperate project.) (Well, maybe not all of it)
 - Jbovlaste integration
 + Oh, also, learn how to speak lojban. Jeeze.
 - Make option for output to be spaceless
 - Make a funny/bad// joke about {tosmabru}
 - If there is demand: xml output
 - look into proper distribution methods, see the distutils module http://docs.python.org/distutils/
     "package_data" for setup.py
 - Optimize the parser by not checking optionals until after we know the item following doesn't match?
    - Is this... valid?
      - If what follows doesn't match, then it could never match!?
        - unless the following is optional.
        - It would match if you had matched the optional.
          - If it doesn't match, then check the optional.
          - If it matches the following, than it can't match the optional (*UNLESS* the optional is the same thing):
              rule = [FOO] FOO BAR
            match: FOO FOO BAR:
              tries:
                FOO(FOO) BAR(FOO), but fails.
              so, if it matches, but stuff before it fails, then check the optional?
            It is quite likely that the BNF doesn't have stuff in the form [FOO] FOO.
    Conclusion:
      We can put off checking optionals so long as the optional isn't the same as the next part, and I doubt the BNF has anything like that. But this will prolly need more investigation.
 - Have an option for inputting by letter type (like CVCCV), which would have been good for debugging morphology but might not be so useful now
 - Go through everything I checked off, make sure it really is.

###### I don't know what I was writing
 - Test more aspects of morphology, and also for the other modules
 - Make the helper code nicer


###### Some things I've completed, to make me feel special
 + Use GNU readline! Not being able to edit lines in jbofihe is /so/ annoying
 + Go through morph_test_sentences.txt (And also, get a URL and an original copy)
    (Okay, only half-heartedly. It wasn't so useful.)
 - Make stream(config, stdin) more like stream(stdin, config=None) and make config take care of itself
 - Make thaumatology.py not print valsi type
Ortohgraphy - what happens to capitalized letters with strict ortho?
    * they are garbage
  Resolve recursive import failures
 + Put stdin into Configuration. Probably the best way to deal with quotes
 + lerfu!  (It is done, right?)
 + EncodingTable vs. GlyphTable! !??!
 - Handle whitespace so that the fact that there is a word seperation is returned immediatly, instead of reading 'til the first non-whitespace. Possibilities include returning a Bit for each whitespace, returning a Bit for the first whitespace and merging the rest, or returning a bit that has no value, but is treated as a whitespace, and having the actual whitespace slurped up later.  (I\'m having it just return each whitespace individualy)
 + sumti-6 in the BNF isn't being loaded correctly
 - Check that I am parsing the BNF correctly. For example, the &s in "simple-tense-modal" (I don't know for certain that the way it parses is correct)
 - I think that morphology hack in orthography isn't needed anymore
 + Ah HA! I've figured out how to handle ZOI: Keep a copy of the old crap. Well, ah, we only need to start when we hit a ZOI, but ohh.. Okay, so EVERYTHING must be copied. AH HA! Okay, that is beautiful love. Hit ZOI. Get delim. Get delim offset. Read shit from morphology, until we hit next delim. Get offset. Suck out stuff between the delim's in the old buffer! :D
 - Fold whitespace/boring into the following token!
 + Debug mode for dendrography (Sorta. I have debugging output for it now.)
 X Re-do the magic_bnf objects, carefully defining what each one should return in each case. -- I decided it'd be better to just make what already almost works instead of starting from scratch
 - examine {miklAmalozdAnibelomAmtabelatimos} (Was a morphology issue, Tokens needed another anti-morphology-tokenization variable)
 - Make --token-error print a backtrace on each token instead of dieing? (traceback.print_stack())
 - Check the bottom of the BNF. Are there unimplemented non-formal rules?
 - Study and meditate upon lojban grammar, make grammar parser
 + Check that the BNF is being intepreted properly (The BNF being parsed wrong hasn't been an issue in forever)
 + Make ZOI period-delims behave properly.
 - slinku'i test
 - Do more garbage checking (For example, try {kl√°ma} with default settings) (Those are now a sub-selma'o of SELBRI, called CIZYSELBRI)
 - what happened with ZOI? (oops, forgot to put the zoi.content...)