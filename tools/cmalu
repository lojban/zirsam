#!/usr/bin/python3.0
# -*- coding: utf-8 -*-


"""
I got about 67% compression rate for a bit copied from la .alis.
Even better compression could be achieved. There are 2228 words (including some fake words), which is between 2**11 and 2**12. It presently uses 16 bits; those 4 bits could be dropped for even greater compression



TODO: Properly rebuild lujvo
"""

import io, sys, os, pickle

import zirsam
import zirsam.morphology as morphology
import zirsam.tokens as tokens
import zirsam.config as config

import bitbuffer

ARRAY_TYPE = 'H'

r2g = pickle.load(open(zirsam.resource('r2g.pyk3'), 'rb'))
g2r = pickle.load(open(zirsam.resource('g2r.pyk3'), 'rb'))

gismu = list(line.strip() for line in open(zirsam.resource('gismu'), 'r'))
fuhivla = (line.strip() for line in open(zirsam.resource('fuhivla'), 'r'))
cmavo = (line.strip() for line in open(zirsam.resource('cmavo'), 'r'))
words = tuple('X')+tuple('%')+tuple('y')+tuple('@')+tuple('456789')+tuple('\n')+tuple(gismu)+tuple(fuhivla)+tuple(cmavo)
MARK_EOF = 0 #X is a placeholder for the EOF marker
DELIM_ZOI = 1 #% is a placeholder for our uncompressable-text
LETTER_Y = 2
DELIM_LUJ = 3 #@ is a placeholder for a rafsi
DELIM_NEWLINE = 10 #\n is the placeholder for newlines
#23456789 makes the newline #10 so that if there's a trailing newline in input, nobody notices.

WORDLIST_LEN = len(words)
WORDLIST_HASH = hash(words)
if WORDLIST_LEN >= 2**16:
  raise Exception("Too many words!")


for gism in gismu:
  r2g[gism] = gism
  r2g[gism[:-1]] = gism

def decompress(src):
  while 1:
    try:
      id = src.read()
      if id == MARK_EOF:
        raise StopIteration
    except StopIteration:
      break
    if id == DELIM_ZOI:
      ords = []
      while 1:
        id = src.read()
        if id == DELIM_ZOI:
          break
        ords.append(id)
      print(''.join(chr(_) for _ in ords), end=' ')
    elif id == DELIM_NEWLINE:
      print()
    elif id == DELIM_LUJ:
      rafs = []
      while 1:
        id = src.read()
        if id == DELIM_LUJ:
          break
        if id == LETTER_Y:
          rafs.append('y')
        elif id < WORDLIST_LEN:
          rafs.append(g2r[words[id]][0])
        else:
          raise Exception("unknown word ID %r" % id)
      
      #XXX TODO TODO TODO TODO: Output a real lujvo
      print(''.join(rafs), end=' ')
    else:
      try:
        print(words[id], end=' ')
      except IndexError:
        raise Exception("Unknown word ID %r"%id)

def compress(valsi_stream):
  #Yield a bunch of integers; starting from 0
  for valsi in valsi_stream:
    if isinstance(valsi, tokens.IGNORABLE):
      if valsi.value == '\n':
        yield DELIM_NEWLINE
      continue
    if valsi.ve_lujvo_rafsi:
      yield DELIM_LUJ
      for raf in valsi.ve_lujvo_rafsi:
        if raf == 'y':
          yield LETTER_Y
          continue
        try:
          gim = r2g[raf]
        except:
          print("{0!r}???".format(raf), file=sys.stderr)
          gim = list(raf)
        if gim in words:
          yield words.index(gim)
        else:
          yield DELIM_ZOI
          for _ in gim: #This shouldn't happen!
            o = ord(_)
            if o in (DELIM_LUJ, DELIM_ZOI):
              raise Exception("That's messed up, man")
            yield o
          yield DELIM_ZOI
      yield DELIM_LUJ
    else:
      if valsi.value in words:
        yield words.index(valsi.value)
      else:
        yield DELIM_ZOI
        for _ in valsi.value:
          o = ord(_)
          if o in (DELIM_LUJ, DELIM_ZOI):
            raise Exception("That's messed up, man")
          yield o
        yield DELIM_ZOI
        
#l = iter(list(compress()))
#decompress(l)
if '--compress' in sys.argv:
  savings = '--show-savings' in sys.argv
  if savings:
    stdin = sys.stdin.read()
    orig = len(stdin)
    stdin = io.StringIO(stdin)
    final = 0
  else:
    stdin = sys.stdin
  comp = compress(morphology.Stream(config.Configuration(stdin=stdin, args=[])))
  if savings:
    stdout = io.BytesIO()
  else:
    stdout = open('/dev/stdout', 'wb')
  b = bitbuffer.BitBuffer(stdout, WORDLIST_LEN)
  for c in comp:
    b.write(c)
  b.end()
  if savings:
    stdout.seek(0)
    open('/dev/stdout', 'wb').write(stdout.read())
    stdout.seek(0)
    final = len(stdout.read())
    print("Compressed size: {1}\nOriginal size: {0}\nRatio: {2}".format(orig, final, final/orig), file=sys.stderr)
elif '--decompress' in sys.argv:
  a = bitbuffer.BitBuffer(open('/dev/stdin', 'rb'), WORDLIST_LEN)
  decompress(a)
  pass
else:
  print("""Usage:
  ./tools/cmalu --compress
      Sends compressed data to non-tty stdout
  Other options valid for --compress:
      --show-savings
          Show how much it improved

  ./tools/cmalu --decompress
      Reads compressed data from stdin

If typing from stdin, you have to hit EOF twice because python3 is weird
Doesn't do proper lujvo recovery yet
""")
